import os
from aiogram import  F
from aiogram.filters import Command 
from aiogram.types import Message, CallbackQuery
from config import ADMIN_IDS

from aiogram.fsm.context import FSMContext 

from collections import defaultdict

from keyboards.admin_kb.categories_kb import *
from keyboards.admin_kb.car_brands_kb import *
from keyboards.admin_kb.admin_kb import *

from loader import bot  # –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
from aiogram import Router
from locales.help_texts import *

# –ü–µ—Ä-—é–∑–µ—Ä "—Å—Ç–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞".
# –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ redis/DB, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –≤ –ø–∞–º—è—Ç–∏:
BACK_STACKS = defaultdict(list)

BACK_ROUTES = {
    "categories": build_categories_kb,
    "brands": lambda: get_car_brands_kb("name"),
    "main": get_admin_main_menu,
    "action_categories": get_category_action_kb,
}

admin_main_router = Router()



# --- 1. /help ---
@admin_main_router.message(Command("help"))
async def cmd_help(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer(HELP_ADMIN)
    else:
        await message.answer(HELP_CLIENT)

# –ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª "üì¶ –¢–æ–≤–∞—Ä—ã" -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@admin_main_router.message(F.text == "üì¶ –¢–æ–≤–∞—Ä—ã")
async def show_products_menu(message: Message):
    user = message.from_user.id
    # –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π: —Ä–æ–¥–∏—Ç–µ–ª—å = main
    BACK_STACKS[user].append("main")
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏?", reply_markup=get_category_action_kb())



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥" (–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
@admin_main_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    user = message.from_user.id

    # –æ—á–∏—â–∞–µ–º FSM (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    if await state.get_state() is not None:
        await state.clear()

    # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å—Ç–µ–∫–∞ (pop). –ï—Å–ª–∏ —Å—Ç–µ–∫–∞ –Ω–µ—Ç ‚Äî main
    if BACK_STACKS[user]:
        target = BACK_STACKS[user].pop()
    else:
        target = "main"

    # –µ—Å–ª–∏ —Å—Ç–µ–∫ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º (–Ω–∞ —Ö—É–¥–æ–π –∫–æ–Ω–µ—Ü) ‚Äî –º–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    # DEBUG: –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å BACK_STACKS[user]

    # –±–µ—Ä–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    kb_func = BACK_ROUTES.get(target, BACK_ROUTES["main"])
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥", reply_markup=kb_func())

@admin_main_router.callback_query(F.data.startswith("back:"))
async def go_back_inline(callback: CallbackQuery, state: FSMContext):
    user = callback.from_user.id
    target = callback.data.split(":")[1]

    # –æ—á–∏—â–∞–µ–º FSM
    if await state.get_state() is not None:
        await state.clear()

    kb_func = BACK_ROUTES.get(target, BACK_ROUTES["main"])

    try:
        await callback.message.delete() # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–µ—Å—Ç—å InlineKeyboardMarkup
        await callback.message.answer(
            f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ {target}",
            reply_markup=get_category_action_kb()
        )
    except Exception as e:
        # –µ—Å–ª–∏ "message is not modified"
        if "message is not modified" in str(e):
            # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(
                f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ {target}",
                reply_markup=kb_func()
            )
        else:
            raise
    await callback.answer()








"""adding_products = {}

# –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ
IMAGE_DIR = "product_images"
os.makedirs(IMAGE_DIR, exist_ok=True)


# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ" (–∏–º–∏—Ç–∞—Ü–∏—è –ë–î) ---
products = {}  # id: {"name": str, "desc": str, "photo": str, "price": float, "qty": int}
orders = []  # —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
feedbacks = {}
users = set()
"""

'''
# --- 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@router.message(Command("add_product"))
async def cmd_add_product(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ;—Ü–µ–Ω–∞;–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n`Monster Energy;–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫;123.45;10`",
        parse_mode="Markdown"
    )


# ---  –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ ---
@router.message(F.photo, F.from_user.id.in_(ADMIN_IDS))
async def handle_product_photo(message: Message):
     # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∏
    if not message.caption:
        await message.answer(
            "‚ùå –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ;—Ü–µ–Ω–∞;–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`",
            parse_mode="Markdown"
        )
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        name, description, price, quantity = message.caption.split(";")
        price = float(price)
        quantity = int(quantity)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ü—Ä–∏–º–µ—Ä:\n"
            "`Monster Energy;–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫;123.45;10`",
            parse_mode="Markdown"
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    file_info = await bot.get_file(file_id)
    filename = f"{name.strip().replace(' ', '_')}.jpg"
    local_path = os.path.join(IMAGE_DIR, filename)
    await bot.download_file(file_info.file_path, local_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    add_product(name.strip(), description.strip(), price, quantity, local_path)

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä *{name.strip()}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")



# --- 7. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ ---
@router.message(Command("orders"))
async def show_orders(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not orders:
        await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üì¶ –ó–∞–∫–∞–∑—ã:\n\n"
    for o in orders:
        text += f"üë§ {o['user']} | üì¶ {o['product']} x{o['qty']} | üìû {o['phone']}\n"
    await message.answer(text)

# --- 8. –†–∞—Å—Å—ã–ª–∫–∞ ---
@router.message(Command("broadcast"))
async def start_broadcast(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    products["_broadcast"] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@router.message(F.from_user.id.in_(ADMIN_IDS))
async def process_broadcast(message: Message):
    if products.get("_broadcast"):
        for uid in users:
            await message.bot.send_message(uid, message.text)
        products.pop("_broadcast", None)
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- 9. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@router.message(Command("stats"))
async def show_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    total_sales = sum(o.get("total", 0) for o in orders)
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales} ‚ÇΩ"
    )

# --- 10. Feedback (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
@router.message(F.text.startswith("/feedback_from_user"))
async def receive_feedback(message: Message):
    try:
        parts = message.text.split(" ", 3)
        user_id = int(parts[1])
        username = parts[2]
        feedback_text = parts[3]

        feedbacks[user_id] = {"username": username, "text": feedback_text}

        await message.answer(
            f"üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{username} (ID: {user_id}):\n\n"
            f"{feedback_text}",
            reply_markup=get_feedback_reply_kb(user_id)
        )
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")


@router.callback_query(F.data.startswith("reply_feedback:"))
async def process_reply_button(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    feedbacks["_reply_to"] = user_id
    await callback.message.answer(f"‚úè –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    await callback.answer()

@router.message(F.from_user.id.in_(ADMIN_IDS))
async def send_admin_reply(message: Message):
    if "_reply_to" in feedbacks:
        user_id = feedbacks["_reply_to"]
        reply_text = message.text
        await message.bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{reply_text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        del feedbacks["_reply_to"]

'''

