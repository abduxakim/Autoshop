import os,re
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message,  CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import ADMIN_IDS
from database.admin_db import *
from database.common_db import *
from keyboards.admin_kb.admin_kb import *



router = Router()

"""#FSM Context
# –û–ø–∏—Å—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 
class UPDATE(StatesGroup):
    name = State()
    desc = State()
    price = State()
    qty = State()
    photo_path = State()"""


"""# --- 1. –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ---
@router.message(Command("products"))
async def list_products(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    product_list = get_all_products()
    if not product_list:
        await message.answer("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_products_kb(product_list)
    )
"""




"""
# ---  –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ ---
@router.callback_query(F.data.startswith("view_product:"))
async def show_product_details(callback: CallbackQuery):
    pid = int(callback.data.split(":")[1])
    product = get_product_by_id(pid)  # –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ db.py

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = (
        f"üÜî {product['id']}\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
        f"üì¶ –ö–æ–ª-–≤–æ: {product['qty']} —à—Ç"
    )

    await callback.message.edit_text(text, reply_markup=get_product_actions_kb(pid))


# --- 2. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@router.callback_query(F.data.startswith("delete_product:"))
async def process_delete_product(callback: CallbackQuery):
    pid = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏–∑ –ë–î –∏ —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
    product = get_product_by_id(pid)
    if product["photo_path"] and os.path.exists(product["photo_path"]):
        os.remove(product["photo_path"])

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –ë–î
    delete_product(pid)

  
    await callback.answer("üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    products = get_all_products()
    if products:
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=get_products_kb(products)
        )
    else:
        await callback.message.edit_text("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")


# --- 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@router.callback_query(F.data.startswith("choose_edit_field:"))
async def choose_edit_field(callback: CallbackQuery):
    pid = int(callback.data.split(":")[1])
    await callback.message.edit_text(
        "‚öô –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_update_fields_kb(pid)
    )

# –ù–∞–∑–≤–∞–Ω–∏–µ
@router.callback_query(F.data.startswith("edit_name:"))
async def edit_name(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split(":")[1])
    await state.update_data(product_id=pid)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(UPDATE.name)


@router.message(UPDATE.name)
async def save_name(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["product_id"]
    update_product(pid, name=message.text,
                   description=get_product_by_id(pid)["description"],
                   price=get_product_by_id(pid)["price"],
                   qty=get_product_by_id(pid)["qty"],
                   photo_path=get_product_by_id(pid)["photo_path"])
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


# –û–ø–∏—Å–∞–Ω–∏–µ
@router.callback_query(F.data.startswith("edit_desc:"))
async def edit_desc(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split(":")[1])
    await state.update_data(product_id=pid)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(UPDATE.desc)


@router.message(UPDATE.desc)
async def save_desc(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["product_id"]
    product = get_product_by_id(pid)
    update_product(pid,
                   name=product["name"],
                   description=message.text,
                   price=product["price"],
                   qty=product["qty"],
                   photo_path=product["photo_path"])
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


# –¶–µ–Ω–∞
@router.callback_query(F.data.startswith("edit_price:"))
async def edit_price(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split(":")[1])
    await state.update_data(product_id=pid)
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await state.set_state(UPDATE.price)


@router.message(UPDATE.price)
async def save_price(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["product_id"]

    try:
        price = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    product = get_product_by_id(pid)
    update_product(pid,
                   name=product["name"],
                   description=product["description"],
                   price=price,
                   qty=product["qty"],
                   photo_path=product["photo_path"])
    await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
@router.callback_query(F.data.startswith("edit_qty:"))
async def edit_qty(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split(":")[1])
    await state.update_data(product_id=pid)
    await callback.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(UPDATE.qty)


@router.message(UPDATE.qty)
async def save_qty(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["product_id"]

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return

    product = get_product_by_id(pid)
    update_product(pid,
                   name=product["name"],
                   description=product["description"],
                   price=product["price"],
                   qty=int(message.text),
                   photo_path=product["photo_path"])
    await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


# –§–æ—Ç–æ
@router.callback_query(F.data.startswith("edit_photo:"))
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    pid = int(callback.data.split(":")[1])
    product = get_product_by_id(pid)
    #–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –ø–æ name —Ç–∞–∫ –∫–∞–∫ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ —Ç–æ–∫–∞ –ø–æ pid
    await state.update_data(product_id=pid, product_name=product["name"]) 
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(UPDATE.photo_path)


@router.message(UPDATE.photo_path)
async def save_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    pid = data["product_id"]
    product_name = data["product_name"]

     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –±—ã–ª–æ
    product = get_product_by_id(pid)

    if product["photo_path"] and os.path.exists(product["photo_path"]):
        os.remove(product["photo_path"])

    if not message.photo:
        await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
        return

    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)

    # –î–µ–ª–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
    safe_name = re.sub(r'[^a-zA-Z0-9_-]', '_', product_name)
    photo_path = f"product_images/{safe_name}.jpg"

    await message.bot.download_file(file.file_path, photo_path)

    update_product(pid,
                   name=product["name"],
                   description=product["description"],
                   price=product["price"],
                   qty=product["qty"],
                   photo_path=photo_path)
    await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
"""




"""# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def get_delete_category_kb(lang="ru"):
    categories = get_categories()
    if not categories:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="noop")]]
        )

    keyboard = []
    row = []
    for i, cat in enumerate(categories, start=1):
        text = cat.get(f"name_{lang}", cat["name_ru"])
        row.append(InlineKeyboardButton(text=text, callback_data=f"delete_cat:{cat['id']}"))
        if i % 2 == 0:  # –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            keyboard.append(row)
            row = []
    if row:  # –æ—Å—Ç–∞—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ)
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

#–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—è
def get_update_category_kb(lang="ru"):
    categories = get_categories()
    if not categories:
        return InlineKeyboardMarkup(
            inline_keyboard= [[InlineKeyboardButton(text="‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="noop")]]
        )
    
    keyboard = []
    row = []
    for i, cat in enumerate(categories, start=1):
        text = cat.get(f"name_{lang}", cat["name_ru"])
        row.append(InlineKeyboardButton(text=text, callback_data=f"update_cat:{cat['id']}"))
        if i % 2 == 0:  # –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            keyboard.append(row)
            row = []
    if row:  # –æ—Å—Ç–∞—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ)
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_update")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)"""
